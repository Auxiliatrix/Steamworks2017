// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc2876.Steamworks2017;

import org.usfirst.frc2876.Steamworks2017.commands.AutoDoNothing;
import org.usfirst.frc2876.Steamworks2017.commands.AutoDriveStraightDistance;
import org.usfirst.frc2876.Steamworks2017.commands.AutonomousCommand;
import org.usfirst.frc2876.Steamworks2017.commands.CGAutoExample;
import org.usfirst.frc2876.Steamworks2017.commands.CGGearLeft;
//import org.usfirst.frc2876.Steamworks2017.commands.CGGearRight;
import org.usfirst.frc2876.Steamworks2017.commands.CGPegNoTurnPid;
import org.usfirst.frc2876.Steamworks2017.commands.CGShootThenMobility;
import org.usfirst.frc2876.Steamworks2017.commands.CGSideGear;
import org.usfirst.frc2876.Steamworks2017.subsystems.Climber;
import org.usfirst.frc2876.Steamworks2017.subsystems.DriveTrain;
import org.usfirst.frc2876.Steamworks2017.subsystems.Intake;
import org.usfirst.frc2876.Steamworks2017.subsystems.Shooter;
import org.usfirst.frc2876.Steamworks2017.subsystems.Vision;

import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.Relay.Value;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends IterativeRobot {

	Command autonomousCommand;
	public SendableChooser<Command> autoChoose;

	public static OI oi;
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	public static DriveTrain driveTrain;
	public static Shooter shooter;
	public static Intake intake;
	public static Climber climber;

	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

	public static Vision vision;
	
	public static final boolean IS_TURN_PID_FUNCTIONAL = true;
	public static final boolean IS_DISTANCE_PID_FUNCTIONAL = true;
	public static final boolean IS_STRAIGHT_PID_FUNCTIONAL = true;

	// public SendableChooser<Command> autoChoose = new
	// SendableChooser<Command>();
	// public SendableChooser autoChoose = new SendableChooser();

	/**
	 * This function is run when the robot is first started up and should be
	 * used for any initialization code.
	 */
	public void robotInit() {
		RobotMap.init();

		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
		driveTrain = new DriveTrain();
		shooter = new Shooter();
		intake = new Intake();
		climber = new Climber();

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

		vision = new Vision();

		// OI must be constructed after subsystems. If the OI creates Commands
		// (which it very likely will), subsystems are not guaranteed to be
		// constructed yet. Thus, their requires() statements may grab null
		// pointers. Bad news. Don't move it.
		oi = new OI();

		// instantiate the command used for the autonomous period
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

		autonomousCommand = new AutonomousCommand();

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
		autoPicker();
		RobotMap.driveTrainLightSpike.set(Value.kForward);

	}

	/**
	 * This function is called when the disabled button is hit. You can use it
	 * to reset subsystems before shutting down.
	 */
	public void disabledInit() {

	}

	public void disabledPeriodic() {
		Scheduler.getInstance().run();
	}

	public void autonomousInit() {
		// schedule the autonomous command (example)
		autonomousCommand = (Command) autoChoose.getSelected();
		if (autonomousCommand != null)
			autonomousCommand.start();
		
		// TODO: move to commands that use pixy
//		RobotMap.driveTrainLightSpike.set(Value.kForward);
		
		driveTrain.stopAllPID();
		
	}

	/**
	 * This function is called periodically during autonomous
	 */
	public void autonomousPeriodic() {
		Scheduler.getInstance().run();
		SmartDashboard.putData(driveTrain);
		SmartDashboard.putData(intake);
		SmartDashboard.putData(shooter);
		SmartDashboard.putData(climber);
		driveTrain.updateSmartDashboard();
	}

	public void teleopInit() {
		// This makes sure that the autonomous stops running when
		// teleop starts running. If you want the autonomous to
		// continue until interrupted by another command, remove
		// this line or comment it out.
//		RobotMap.driveTrainLightSpike.set(Value.kForward);
		if (autonomousCommand != null)
			autonomousCommand.cancel();
		
		driveTrain.stopAllPID();
		driveTrain.navx.reset();
		driveTrain.initializeCamera();
	
	}
	

	/**
	 * This function is called periodically during operator control
	 */
	public void teleopPeriodic() {
		Scheduler.getInstance().run();
		driveTrain.updateSmartDashboard();
		SmartDashboard.putData(driveTrain);
		SmartDashboard.putData(intake);
		SmartDashboard.putData(shooter);
		SmartDashboard.putData(climber);

		// TODO: we need to move this out of here.. maybe put in in command that
		// uses vision... ok to leave here while testing/practicing.


	}

	/**
	 * This function is called periodically during test mode
	 */
	public void testPeriodic() {
		LiveWindow.addActuator("DriveSystem", "turnPID", driveTrain.getTurnPID());
		LiveWindow.addActuator("DriveSystem", "straightPID", driveTrain.getStraightPID());
		LiveWindow.run();
	}

	public void autoPicker() {
		int redRightFirst = 38; //40 previously, but trying 38.
		int redRightTurn = -40;
		int redRightSecond = 82;
		boolean redRightShoot = true;
		double percentDistanceLeft = 50;
		
		int redLeftFirst = 45;
		int redLeftTurn = 42;
		int redLeftSecond = 78;
		boolean redLeftShoot = false;
		
		
		int blueRightFirst = 45;
		int blueRightTurn = -42;
		int blueRightSecond = 78;
		boolean blueRightShoot = false;
		
		int blueLeftFirst = 41; //was 38 at first
		int blueLeftTurn = 40;
		int blueLeftSecond = 82;
		boolean blueLeftShoot = true;
		
		
		autoChoose = new SendableChooser<Command>();
		autoChoose.addDefault("Auto Drive Forward", new AutoDriveStraightDistance(80));
		autoChoose.addObject("Do Nothing", new AutoDoNothing());
		autoChoose.addObject("Center Peg", new CGAutoExample());
		autoChoose.addObject("RIGHT Peg RED Alliance", new CGSideGear(redRightFirst, redRightTurn, redRightSecond, redRightShoot, percentDistanceLeft));
		autoChoose.addObject("LEFT Peg RED Alliance", new CGSideGear(redLeftFirst, redLeftTurn, redLeftSecond, redLeftShoot, percentDistanceLeft));
		autoChoose.addObject("RIGHT Peg BLUE Alliance", new CGSideGear(blueRightFirst, blueRightTurn, blueRightSecond, blueRightShoot, percentDistanceLeft));
		autoChoose.addObject("LEFT Peg BLUE Alliance", new CGSideGear(blueLeftFirst, blueLeftTurn, blueLeftSecond, blueLeftShoot, percentDistanceLeft));

//		autoChoose.addObject("Auto To Left Peg", new CGGearLeft());
//		autoChoose.addObject("Auto To Left Peg (No PID)", new CGPegNoTurnPid(false));
//		autoChoose.addObject("Auto To Right Peg (No PID)", new CGPegNoTurnPid(true));
//		autoChoose.addObject("Auto Red Side Shoot + Mobility", new CGShootThenMobility(false));
//		autoChoose.addObject("Auto Blue Side Shoot + Mobility", new CGShootThenMobility(true));

		SmartDashboard.putData("AutonomousChooser", autoChoose);
	}
}