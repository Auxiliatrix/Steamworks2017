// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2876.Steamworks2017.subsystems;

import org.usfirst.frc2876.Steamworks2017.RobotMap;
import org.usfirst.frc2876.Steamworks2017.commands.*;
import org.usfirst.frc2876.Steamworks2017.Robot;

import com.ctre.CANTalon;

import edu.wpi.first.wpilibj.CameraServer;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.Relay;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 *
 */
public class DriveTrain extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final CANTalon frontLeftTalon = RobotMap.driveTrainFrontLeftTalon;
    private final CANTalon frontRightTalon = RobotMap.driveTrainFrontRightTalon;
    private final CANTalon rearLeftTalon = RobotMap.driveTrainRearLeftTalon;
    private final CANTalon rearRightTalon = RobotMap.driveTrainRearRightTalon;
    private final Relay lightSpike = RobotMap.driveTrainLightSpike;
    private final Encoder leftEncoder = RobotMap.driveTrainLeftEncoder;
    private final Encoder rightEncoder = RobotMap.driveTrainRightEncoder;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public RobotDrive myRobot;
    
    public CameraServer server;
    
    public DriveTrain(){
    	
    	
    	myRobot = new RobotDrive(frontLeftTalon, rearLeftTalon, frontRightTalon, rearRightTalon);
    	myRobot.setSafetyEnabled(false);
    
    	initializeCamera();
    	
    }

    public void initializeCamera(){
    	server = CameraServer.getInstance();
//    	server.setQuality(50);
    	server.startAutomaticCapture("cam0", 0);
    	
    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new DriveControl());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
    
    public void updateSmartDashboard(){
//		boolean sensorPluggedIn = (frontRightTalon.isSensorPresent(FeedbackDevice.QuadEncoder) == FeedbackDeviceStatus.FeedbackStatusPresent);
//		SmartDashboard.putBoolean("fr encoder isSensorPresent ", sensorPluggedIn);
    //	SmartDashboard.putData("Left Encoder", getLeftEncoder());
//    	SmartDashboard.putData("Right Encoder", getRightEncoder());
//    	SmartDashboard.putNumber("Right Encoder d", leftEncoder.getDistance());
//    	SmartDashboard.putNumber("Left Encoder d", rightEncoder.getDistance());
    	SmartDashboard.putBoolean("is navX connected", Robot.navX.isConnected());
    	SmartDashboard.putBoolean("is navX calibrating", Robot.navX.isCalibrating());
    	SmartDashboard.putData("NavX", Robot.navX);
    	SmartDashboard.putBoolean("is navX moving", Robot.navX.isMoving());
    	SmartDashboard.putBoolean("is navX rotating", Robot.navX.isRotating());
    	SmartDashboard.putNumber("navX angle", Robot.navX.getAngle());
    	SmartDashboard.putNumber("navX pitch", Robot.navX.getPitch());
    	SmartDashboard.putNumber("navX yaw", Robot.navX.getYaw());
    	SmartDashboard.putNumber("navX roll", Robot.navX.getRoll());
    	SmartDashboard.putNumber("navX WorldX", Robot.navX.getWorldLinearAccelX());
    	SmartDashboard.putNumber("navX WorldY", Robot.navX.getWorldLinearAccelY());
    	SmartDashboard.putNumber("navX WorldZ", Robot.navX.getWorldLinearAccelZ());
    //	SmartDashboard.putNumber("Accel RoboRio", accel.getAcceleration());
    //	SmartDashboard.putData("pid", turnController);
  //  	SmartDashboard.putNumber("pid output", turnController.get());
//    	SmartDashboard.putBoolean("is crossing", isCrossing);
    	
    }
    
}

