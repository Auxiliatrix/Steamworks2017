// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc2876.Steamworks2017.commands;

import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc2876.Steamworks2017.Robot;

/**
 *
 */
public class DriveControl extends Command {
	double rampConstant = .75;
	double sensitivity = 1;
	double leftY;
	double rightX;

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
	public DriveControl() {

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
		requires(Robot.driveTrain);

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	}

	// Called just before this Command runs the first time
	protected void initialize() {
		Robot.driveTrain.setVelocityMode();
	}

	// Called repeatedly when this Command is scheduled to run
	protected void execute() {
		if (Robot.driveTrain.toggleInverseDrive() == false) {
			leftY = Robot.oi.getLeftY();
			rightX = Robot.oi.getRightX();
		} else if (Robot.driveTrain.toggleInverseDrive()) {
			leftY = Robot.oi.getLeftY() * -1;
			rightX = Robot.oi.getRightX() * -1;
		}
		// double leftY = (rampConstant * Math.pow(Robot.oi.getLeftY(), 3) +
		// (1 - rampConstant) * Robot.oi.getLeftY()) * sensitivity;
		// double rightX = (rampConstant * Math.pow(Robot.oi.getRightX(), 3) +
		// (1 - rampConstant) * Robot.oi.getRightX()) * (sensitivity + .15);
		// Robot.driveTrain.myRobot.arcadeDrive(leftY, rightX, true);
		if (Robot.driveTrain.isTurnRunning() == false && Robot.driveTrain.isDistanceRunning() == false) {
			Robot.driveTrain.setVelocityJoysticks(leftY, rightX);
		}

	}

	// Make this return true when this Command no longer needs to run execute()
	protected boolean isFinished() {
		return false;
	}

	// Called once after isFinished returns true
	protected void end() {
	}

	// Called when another command which requires one or more of the same
	// subsystems is scheduled to run
	protected void interrupted() {
	}
}
