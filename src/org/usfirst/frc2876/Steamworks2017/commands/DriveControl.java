// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc2876.Steamworks2017.commands;

import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc2876.Steamworks2017.Robot;

/**
 *
 */
public class DriveControl extends Command {
	double rampConstant = .75 * Robot.driveTrain.getMaxRpm();
	double sensitivity = .2;
	double leftY;
	double rightX;
	final double TOLERANCE_FOR_JOYSTICK = .1;
	double startTime = Timer.getFPGATimestamp();
	final double INTAKE_OVERLAP_TIME = 1.0; //in seconds

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
	public DriveControl() {

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
		requires(Robot.driveTrain);


		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	}

	// Called just before this Command runs the first time
	protected void initialize() {
		Robot.driveTrain.setVelocityMode();
		Robot.driveTrain.navx.reset();

	}

	// Called repeatedly when this Command is scheduled to run
	protected void execute() {
		rightX = Robot.oi.getRightX();
		leftY = Robot.oi.getLeftY();

		if (Math.abs(leftY) > TOLERANCE_FOR_JOYSTICK){
			Robot.driveTrain.stopDistance();
			Robot.driveTrain.stopTurn();
//			if (!Robot.driveTrain.toggleInverseDrive()) {
				if(leftY < -TOLERANCE_FOR_JOYSTICK){
					Robot.intake.intakeStart();
					startTime = Timer.getFPGATimestamp();
				} else {
					if (Timer.getFPGATimestamp() - startTime > INTAKE_OVERLAP_TIME) {
						Robot.intake.intakeStop();
					}
				}
//			} else {
//				if(leftY < -TOLERANCE_FOR_JOYSTICK){
//					Robot.intake.intakeStart();
//					startTime = Timer.getFPGATimestamp();
//				} else {
//					if (Timer.getFPGATimestamp() - startTime > INTAKE_OVERLAP_TIME){ 
//						Robot.intake.intakeStop();
//					}
//				}
//				leftY *= -1;
//			}
			if (Math.abs(rightX) < TOLERANCE_FOR_JOYSTICK) {
				if (!Robot.driveTrain.isStraightRunning() && Robot.IS_STRAIGHT_PID_FUNCTIONAL) {
					Robot.driveTrain.startStraight(true);
				}
				Robot.driveTrain.velocityTankStraightJoysticks(leftY);
			} else {
				Robot.driveTrain.stopStraight();
				Robot.driveTrain.setVelocityArcadeJoysticks(leftY, rightX);
			}
		} else if (Math.abs(rightX) > TOLERANCE_FOR_JOYSTICK) {
			Robot.driveTrain.stopAllPID();
			Robot.driveTrain.setVelocityArcadeJoysticks(leftY, rightX);
		} else {
			if (Robot.driveTrain.isStraightPIDFromDriveControl){
				Robot.driveTrain.stopStraight();
			}
			if (!Robot.driveTrain.isDistanceRunning() && !Robot.driveTrain.isStraightRunning()
					&& !Robot.driveTrain.isTurnRunning()){
				Robot.driveTrain.setVelocityArcadeJoysticks(0, 0);
			}
		}

	}
	
	// Make this return true when this Command no longer needs to run execute()
	protected boolean isFinished() {
		return false;
	}

	// Called once after isFinished returns true
	protected void end() {
	}

	// Called when another command which requires one or more of the same
	// subsystems is scheduled to run
	protected void interrupted() {
	}
}
