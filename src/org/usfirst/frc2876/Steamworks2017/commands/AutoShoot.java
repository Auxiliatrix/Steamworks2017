// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2876.Steamworks2017.commands;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.Relay.Value;
import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc2876.Steamworks2017.Robot;
import org.usfirst.frc2876.Steamworks2017.RobotMap;

/**
 *
 */
public class AutoShoot extends Command {

	double startTime;
	boolean hasLoaderStarted = false;
	boolean isLoaderInversed = false;
	final double LOADER_WAIT = 1.0;
	final int LOADER_INVERSE_INTERVAL = 2; //time between inverting. Used in modulus, so it needs to be an int
	final double LOADER_INVERSE_DURATION = .25;
	double loaderInverseStart;
	final double TIME_SPENT_SHOOTING = 8.0;

	public AutoShoot() {

		requires(Robot.shooter);

	}

	// Called just before this Command runs the first time
	protected void initialize() {
		Robot.shooter.shooterStart(Robot.shooter.MAX_RPM);
		startTime = Timer.getFPGATimestamp();
		RobotMap.driveTrainLightSpike.set(Value.kForward);

	}

	// Called repeatedly when this Command is scheduled to run
	protected void execute() {
		double currentTime = Timer.getFPGATimestamp();
		double currentDiff = currentTime - startTime;
		if(currentDiff > LOADER_WAIT && !hasLoaderStarted){
			Robot.shooter.loaderStart();
			hasLoaderStarted = true;
		}
		if(!isLoaderInversed && (int)currentDiff % LOADER_INVERSE_INTERVAL == 0){
			Robot.shooter.loaderInverse();
			isLoaderInversed = true;
			loaderInverseStart = currentTime;
		}
		if(isLoaderInversed && currentTime - loaderInverseStart > LOADER_INVERSE_DURATION) {    		
			Robot.shooter.loaderStart();
			isLoaderInversed = false;
		}
	}

	// Make this return true when this Command no longer needs to run execute()
	protected boolean isFinished() {
		return (Timer.getFPGATimestamp() - startTime > TIME_SPENT_SHOOTING);
	}

	// Called once after isFinished returns true
	protected void end() {
		Robot.shooter.loaderStop();
		Robot.shooter.shooterStop();
		RobotMap.driveTrainLightSpike.set(Value.kOff);
	}

	// Called when another command which requires one or more of the same
	// subsystems is scheduled to run
	protected void interrupted() {
		end();
	}
}
